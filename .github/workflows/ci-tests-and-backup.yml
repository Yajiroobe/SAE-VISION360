name: Tests automatiques Vision360 + Backup Google Drive

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-tests-and-backup:
    name: Tests backend & frontend + sauvegarde sur Drive
    runs-on: ubuntu-latest

    steps:
      # 1) Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Backend (Python)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install backend dependencies
        working-directory: backend
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping..."
          fi

      - name: Run backend tests (pytest)
        working-directory: backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          if [ -d tests ]; then
            pytest --maxfail=1 --disable-warnings -q
          else
            echo "No backend tests directory found"
          fi

      # 3) Frontend (Node)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run frontend tests (npm)
        working-directory: frontend
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
            npm test --if-present
          else
            echo "No frontend package.json found, skipping..."
          fi

      # 4) Créer le ZIP du projet
      - name: Create ZIP backup
        run: |
          sudo apt-get update && sudo apt-get install -y zip jq rclone
          zip -r vision360-backup.zip . -x ".git/*"
          ls -lh vision360-backup.zip

      # 5) Écrire le JSON du service account et le valider
      - name: Write service-account JSON & validate
        run: |
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' > sa.json
          jq -e . sa.json >/dev/null
          echo "✅ Service account JSON looks valid."

      # 6) Configurer rclone avec le dossier Drive comme racine
      - name: Configure rclone (root = folder ID)
        env:
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        run: |
          rclone config create gdrive drive scope=drive service_account_file=sa.json root_folder_id="${GDRIVE_FOLDER_ID}"
          echo "=== rclone remote config ==="
          rclone config show gdrive

      # 7) Diagnostic avant upload
      - name: Diagnose Drive access (pre-upload)
        run: |
          echo "Listing root of gdrive: (should be your backup folder)"
          rclone lsd gdrive: || true
          echo "Flat list:"
          rclone lsf gdrive: --max-depth 1 || true

      # 8) Upload du backup
      - name: Upload backup to Google Drive
        run: |
          BACKUP_NAME="vision360-backup-$(date +%Y%m%d_%H%M%S).zip"
          mv vision360-backup.zip "$BACKUP_NAME"
          echo "Uploading $BACKUP_NAME to gdrive: (root is your folder ID)"
          rclone copy "$BACKUP_NAME" gdrive: --drive-server-side-across-configs -v

      # 9) Vérification après upload
      - name: List last backups (post-upload)
          if: always()
        run: |
          echo "✅ Derniers fichiers dans gdrive:"
          rclone lsf gdrive: --max-depth 1 | tail -n 10 || true
